[{"categories":null,"content":"Magit 的基本介绍 Magit是在emacs中对git的一种扩展, 它的本质是在emacs中, 利用emacs的方式调用git的命令, 使得git的使用更加地emacs化. 本人的emacs 能力有限, 因此只介绍magit中的一些最常用的命令, 方便日常使用够用即可. 要更加全面地研究可以看它的原网站. ","date":"2022-08-15","objectID":"/posts/magit_usage_03/:1:0","series":null,"tags":["git"],"title":"Magit的基本使用","uri":"/posts/magit_usage_03/#magit-的基本介绍"},{"categories":null,"content":"Magit的基本介绍 ","date":"2022-08-15","objectID":"/posts/magit_usage_03/:2:0","series":null,"tags":["git"],"title":"Magit的基本使用","uri":"/posts/magit_usage_03/#magit的基本介绍"},{"categories":null,"content":"打开Magit窗口: 使用Emacs打开任一由git管理的文件, 再使用快捷键 C-x g (M-x magit-status) 即可打开. 基本上第一次需要使用M-x magit-status打开, 后面才能用C-x g快捷键, 不知道是不是什么bug. 打开后会有一个窗口(这里我事先建好了一个 git 仓库) 分析下magit 窗口每部分的意思: Head: 当前HEAD指向 Untracked files: 未追踪的文件 (也就是没使用 git add 命令添加的文件) Unstaged changes: 由git管理, 进行了修改, 但未添加到暂存区的文件 Recent commits: 最近的提交记录, 第一列就是提交ID 如果常使用git, 以上解释应该一遍就能记住 ","date":"2022-08-15","objectID":"/posts/magit_usage_03/:2:1","series":null,"tags":["git"],"title":"Magit的基本使用","uri":"/posts/magit_usage_03/#打开magit窗口"},{"categories":null,"content":"常用的一些快捷键 g \u0026 G: g可以刷新当前buffer, G刷新全部buffer. 什么意思呢, 比如当前你在查看magit面板, 但是突发奇想往工程里添加了个文件, 这时magit面板的Untracked files里应该要多一个刚添加的文件的, 但是并没有, 此时需要按一下g, 这时这个新加的文件就会出现然Untracked files里了. TAB: 折叠, 即如果光标在Untracked files这一行, 按TAB, 即可将UnTracked files这个小节给折叠起来, 工程文件多的时候这个功能十分管用. 下面是将Recent commits折叠后的结果. C-p, C-n \u0026 M-p, M-n: C-p和C-n是上下移动, 与emacs移动相同. M-p和M-n是同级上下移动. 比如上面这个图, 如果光标在file这一行, 按M-n则会移动到new这一行, 如果光标在Untracked files这一行, 按M-n则会移动到Unstaged changes这一行. d d: 查看diff, 将text.txt文件中的内容修改, 并将光标移动到Unstaged changes中的 modified text.txt 这一行, 按两下d, 即可弹出 diff 相关内容, 弹窗如下: 这个弹窗分两部分, Unstaged changes部分是文件名以及其修改的总结. 它的下面是针对每个文件高亮修改的内容. 可以清楚地看到改支的行以及改动的内容: 红删除, 蓝为添加行, 标红内容为删除内容, 标蓝内容为添加内容. 一开始看可能有些不习惯, 但习惯后这个功能十分有用. 此外, 如果在某一个提交行按 d d, 则会显示本次提交与前一次提交的diff s \u0026 u: s可将文件添加到暂存区, u可将文件移出暂存区. 比如光标调整到new这个文件上, 按s后结果为: 可以看到new这个文件从Untracked files移到了staged changes这个小节下. 翻译成git的话就是 使用了 git add new 这个命令. q: 退出当前buffer. Enter: 到处都能用, 一个很好用的地方是, 在查看diff时, 在某一行按Enter, 它会直接跳到这个文件的这一行供你修改. c: 提交弹窗, 如下: 此时按c, 即Commit (git commit -m), (通常直接按两下c), 这时会进入提交信息提示弹窗, 输入完提示信息后 再按C-c C-c 即可完成提交 (C-c C-k 放弃提交). 此时按a, 即 git commit --amend l: log弹窗 r: rebase弹窗 ","date":"2022-08-15","objectID":"/posts/magit_usage_03/:2:2","series":null,"tags":["git"],"title":"Magit的基本使用","uri":"/posts/magit_usage_03/#常用的一些快捷键"},{"categories":null,"content":"可能看起来学习成本高, 但其实学会后好处要远远大于学习成本 ","date":"2022-08-15","objectID":"/posts/magit_usage_03/:3:0","series":null,"tags":["git"],"title":"Magit的基本使用","uri":"/posts/magit_usage_03/#可能看起来学习成本高-但其实学会后好处要远远大于学习成本"},{"categories":null,"content":"基础(最常用的命令) git init #初始化Git仓库 git add . #添加所有未追踪文件或修改 git add filename #添加指定文件 git commit -m \"commit information\" # 提交 git push #推送到远程 git pull #从远程拉取 git status # 查看当前状态 git log # 查看提交日志 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:1:0","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#基础--最常用的命令"},{"categories":null,"content":"版本回退 前一个版本: I’m a little tired!!! 当前版本: I’m not tired!!! 这时使用 git add 和 git commit 提交了, 但是想回退过去的操作办法如下: git中HEAD表示当前的提交版本, HEAD^表示前一个提交版本,所以想回退的操作为: git reset --hard HEAD^ 未回退命令时日志显示: 有两个版本: first 和 not tired 使用回退命令后日志显示: 只有 first 了 当知道commit ID时, 使用 commit ID直接跳到想要的版本. 比如现在想再返回 not tired, 操作命令为: git reset --hard commit_id 这时再查看log结果为: 可以看到, 使用了这个命令后, 我们的not tired 提交又回来了. 当不知道commit ID时也是有办法的 git提供了 git reflog 命令, 这个命令的输出结果是记录你的每一次命令, 使用 git reflog 命令查看历史命令: 可以看到第一列记录了所有的commit ID, 最后一列记录了执行的操作, 根据最后一列信息找到对应的ID号即可 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:2:0","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#版本回退"},{"categories":null,"content":"回退问题: 如何跳到某个指定commit_id的版本? 假如你刚提交了一个版本, 现在后悔了想返回到前一个版本, 应该使用什么命令? 假如你回退到前某个版本, 现在后悔了, 想返回到最近的某个版本, 但是 commit_id 不记得, 该怎么办? ","date":"2022-08-06","objectID":"/posts/git_usage_02/:2:1","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#回退问题"},{"categories":null,"content":"回退总结: HEAD 为当前版本, 使git reset --hard commit_id 可以跳到对应的版本 git reflog 命令可以查看所有操作的记录, 可以用于查找所需要的版本号 tip: HEAD表示当前版本, HEAD^表示前一个提交版本, HEAD^^为前2个提交的版本, HEAD~100 为第前100个版本 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:2:2","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#回退总结"},{"categories":null,"content":"撤销修改 前一节所说的版本回退有个缺点, 那就是, 回退到前一个版本, 所有相关文件的最新修改均会丢失. 并且版本回退是针对已提交的内容的. 现在有个新问题: 在git管理的版本下, 撤销对某个文件的修改. 这之前要了解一下git管理的基本逻辑. ","date":"2022-08-06","objectID":"/posts/git_usage_02/:3:0","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#撤销修改"},{"categories":null,"content":"git 基本逻辑 git仓库其实分为工作区(working tree), 暂存区(stage), 和 仓库() 工作区就是我们看到和使用的部分 暂存区是我们使用 git add filename 后文件所到达的部分 仓库是我们使用 git commit 后文件所在的部分 在使用 git commit 命令时, 只会将暂存区部分的内容保存到仓库 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:3:1","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#git-基本逻辑"},{"categories":null,"content":"文件修改的撤销 在上一次提交后, 本次我们对某个文件进行了修改, 发现修改后程序运行出错了. 现在删除对文件的修改, 应该怎么做(并未使用 git add命令)? 这时需要的命令为 git checkout -- filename. 对文件修改后查看工作区状态: 可以看到有修改, 这时使用 git checkout filename 后结果为: 再次查看文件, 修改己经没有了 假设这次我们对文件进行了修改, 且已经使用了 git add filename了该怎么办呢? 办法是使用 git reset HEAD filename 记其回到未 add 的情况. 我们将修改添加到暂存区, 并查看状态: 先看一下与前面的区别, 未add时, 字是红色的, 提示信息是\"尚未暂存以备提交的变更\" 使用 git add filename 后提示信息是\"要提交的变更\" 此时使用 git reset HEAD filename 后的状态为: 可以看到取消了暂存的变更, 这时查看状态则又到了修改未提交的状态了. 此时再使用 git checkout -- filename 命令即可以撤销修改了. ","date":"2022-08-06","objectID":"/posts/git_usage_02/:3:2","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#文件修改的撤销"},{"categories":null,"content":"撤销问题 有修改, 但是未添加到暂存区, 如何撤销? 有修改, 已添加到暂存区, 如何撤销? ","date":"2022-08-06","objectID":"/posts/git_usage_02/:3:3","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#撤销问题"},{"categories":null,"content":"撤销总结 git checkout -- filename 撤销对工作区文件的修改 git reset HEAD filename 撤销对文件的暂存操作 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:3:4","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#撤销总结"},{"categories":null,"content":"文件删除 git仓库的文件删除和正常文件夹的删除不大一样, 因为git将删除也视为了一个操作, 因此删除也需要提交. 正常删除文件后查看仓库状态: 同样, 使用 git checkout -- filename也可以取消该操作. 使用 git rm filename 删除文件后查看状态: 可以看到, 直接删除后提示信息是红色的, 且提示信息是\"修改尚未加入提交\". 也就是说, 这时还需要使用 git add命令才可以使用 git commit将删除操作提交到仓库. 而 git rm filename则可以直接将删除提交到仓库. 对于已添加,未添加的修改如何撤销可见上一节. ","date":"2022-08-06","objectID":"/posts/git_usage_02/:4:0","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#文件删除"},{"categories":null,"content":"删除问题 若要删除仓库中的文件应如何操作? 直接删除与使用 git rm 命令删除有何不同? 删除后如何撤销? ","date":"2022-08-06","objectID":"/posts/git_usage_02/:4:1","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#删除问题"},{"categories":null,"content":"删除总结 删除与修改一样, 都是要提交到仓库的 使用 git rm 操作相当于使用 直接删除并使用了 git add 命令 删除的撤销可根据是否添加到暂存区同修改一样操作 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:4:2","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#删除总结"},{"categories":null,"content":"分支 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:5:0","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#分支"},{"categories":null,"content":"创建与合并 分支的创建与删除: git branch branch_name 创建新分支前: 创建新分支后: git branch newBranch (* 表示当前HEAD所在的分析, 即当前工作区的分支) 切换分支: git checkout newBranch 可以看到 * 从main到了newBranch 分支删除: git branch -d newBranch (不能删除当前所在分支, 因此要先切回main分支才可执行该操作) 分支的合并现有两个分支:main和bugFix 合并前: 将HEAD放在main分支上, 并执行 git merge bugFix: 可以看到, 合并会产生一个新的提交, 且当前节点有了两个父节点. 这里其实可以更深入理解下git checkout这个命令, 它的真实作用是切换当前工作区在git这个仓库树中的位置.即, HEAD可以指向main或者bugFix这种具体的分支名, 也可以指向某一个commit_id(每一个commit_id即是工作区的一个版本) ","date":"2022-08-06","objectID":"/posts/git_usage_02/:5:1","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#创建与合并"},{"categories":null,"content":"冲突的修正 假如我们现在有2个分支: master和newBranch, 在这两个分支中我们都对一个文件进行了修改. 这时, 将newBranch分支合并到master分支时就会出现冲突: 这里master分支中我们添加的内容是\"Creating a new branch!!!“并提交了. 在newBranch分支中我们添加的内容是\"Create a new branch!!!”. 所以在HEAD处于master分支, 并运行 git merge newBranch时会出现冲突. 我们打开提示的冲突文件, 文件内容如下: Git用\u003c，=，\u003e标记出不同分支的内容，我们修改如下后保存： 这时查看仓库状态为: 此时将其添加到仓库并提交 这时查看日志树可以看到合并过程: ","date":"2022-08-06","objectID":"/posts/git_usage_02/:5:2","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#冲突的修正"},{"categories":null,"content":"分支问题 如何创建分支与删除分支? 如何在不同分支中进行切换? 如何合并不同的分支? 合并分支后有冲突了该怎么办? ","date":"2022-08-06","objectID":"/posts/git_usage_02/:5:3","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#分支问题"},{"categories":null,"content":"分支总结 分支创建: git branch branch_name 分支删除: git branch -d branch_name 将其他分支合并到当前分支: git merge other_branch 分支切换: git checkout branch_name 冲突解决: 修正冲突的文件并添加到暂存区, 然后提交 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:5:4","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#分支总结"},{"categories":null,"content":"高级篇:命令详解 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:0","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#高级篇-命令详解"},{"categories":null,"content":"分离HEAD 这是一个很小的概念, 单独说它, 就是因为它很重要. 其实git是由不同的提交组成, 每个提交都可以看成一个树中的节点. 所有的提交在一起组成了一个提交树. 而当前的工作区(也就是我们能看到并修改的那些文件), 就是HEAD所指向的. 其实HEAD并不是非要指向具体的分支, 它也可以直接指向某个提交. 比如当前的提交树为: 可以看到*在bugFix这个分支上, 这也表示HEAD指向bugFix, 我们可以直接让它指向C4 git checkout C4 (这里的C4是提交id): 同样, 也可以使用这个命令让它指向 main, 或者 C0: 其实checkout这个命令用来切换HEAD的指向并不准确, 新版的git使用switch命令 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:1","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#分离head"},{"categories":null,"content":"相对引用(^) 在不同的仓库进行切换时, 使用commit id十分麻烦, 因为id需要使用git log命令查找, git提供了相对引用, 即^表示上一个, ^^表示上2个, ~10 表示前10个. 如使用 git checkout main^ 效果为: 可以看到当HAED指向main时, HEAD^和main^都是指向C5的. 再次使用 git checkout HEAD~3 结果为: ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:2","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#相对引用"},{"categories":null,"content":"撤销变更 (reset \u0026 revert) 当本地出错要回退时, 有2个命令可用. reset可将当前分支回退到指定提交. 可看执行结果: 原本提交树是这样, 使用 git reset HEAD^ 后: 可以看到, 这个命令让分支放弃了当前节点而指向了父节点. 若对原本的提交树使用 git revert HEAD^ 命令后的提交树为: 可以看到, 现在这人分支指向了C1’这个提交, 其实C1’与C1是相同的, 但是 git 将回退作为一个操作然后提交到仓库. 这样做的好处: 在本地其实是没有什么区别的, 但是如果推送到远程, 使用git reset后若要与远程同步, 需要将远程的最新提交删除, 这个操作难以实现, 因此将回退作为一个新的提交可以方便远程与本地的同步, 方便多人合作. ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:3","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#撤销变更--reset-and-revert"},{"categories":null,"content":"提交树的节点移动 (rebase \u0026 cherry-pick) rebase: 它的主要作用是创建线性提交记录, 方便工程修改脉路整理. 比如对于当前提交树: 我们使用 git rebase main后提交树变化为: 现在分析一下这个结果. feature 和 main 分支的公共父节点是C1, 我在的HEAD指向feature, 此时运行以上命令后, git 将C2,C4 提交接到了main所指向的C3上, 也就是说: 这个命令会将当前分支的所有提交接到指定的分支上 因此 rebase 可以表象地理解为 剪枝 + 嫁接 如果使用merge命令的话提交树会变为: 这时提交记录则不够线性, 不方便查看对工程的修改历史 rebase 的另一个功能: 提交记录排序与删除. git rebase -i HEAD~4: 这个命令会弹出一个交互式的创口, 让你调整最新4个提交节点的顺序或者删除提交节点. 下面是一个例子: 知道这个功能即可, 不具体说明了 cherry-pick: 这个命令允许我们随意地移动提交树中的节点, 将指定的提交节点移动到当前的HEAD所指定的节点下. 对以下提交树: 使用 git cherry-pick C2 C4 C6 后结果为: 可以看到, 选中的提交节点都添加到了当前分支 main 所指向的节点下. 这样的命令有什么作用呢? 场景一: 当前出了一些问题, 可此需要新建一些分支来解决, 最终解决了当前的问题: 但是此时, 我们只想要收录解决问题的提交到当前的main下, 此时就可以使用 rebase -i 和 cherry-pick 这两个命令来实现. 将HEAD调整到main分支上, 再使用 git cherry-pick C4 (左) 或者使用 git rebase -i HEAD~3 后调整提交 (右) 即可获得: 场景二: 更新历史提交节点中的信息 下面的提交树中, 我想更新newImage提交中的信息, 且是只更新它的信息, 可使用 rebase -i 和 cherry-pick 这两种方式来实现. 口述使用 rebase -i 命令过程: 先调整C2和C3顺序,将C2提交节点放到最前, 再使用 git commit --amend 来提交列新C2中的信息, 最后使用 rebase -i 命令将C3节点放到最前. 详细说明 cherry-pick 过程 (因为不用交互, 易于博客中展示). 首先调整HEAD到main: git checkout main 其次, 将C2 拿到最前: git cherry-pick C2 然后, 修改C2中的内容并提交: git commit --amend 最后, 将C3节点放到最前: git cherry-pick C3 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:4","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#提交树的节点移动--rebase-and-cherry-pick"},{"categories":null,"content":"提交树的节点移动 (rebase \u0026 cherry-pick) rebase: 它的主要作用是创建线性提交记录, 方便工程修改脉路整理. 比如对于当前提交树: 我们使用 git rebase main后提交树变化为: 现在分析一下这个结果. feature 和 main 分支的公共父节点是C1, 我在的HEAD指向feature, 此时运行以上命令后, git 将C2,C4 提交接到了main所指向的C3上, 也就是说: 这个命令会将当前分支的所有提交接到指定的分支上 因此 rebase 可以表象地理解为 剪枝 + 嫁接 如果使用merge命令的话提交树会变为: 这时提交记录则不够线性, 不方便查看对工程的修改历史 rebase 的另一个功能: 提交记录排序与删除. git rebase -i HEAD~4: 这个命令会弹出一个交互式的创口, 让你调整最新4个提交节点的顺序或者删除提交节点. 下面是一个例子: 知道这个功能即可, 不具体说明了 cherry-pick: 这个命令允许我们随意地移动提交树中的节点, 将指定的提交节点移动到当前的HEAD所指定的节点下. 对以下提交树: 使用 git cherry-pick C2 C4 C6 后结果为: 可以看到, 选中的提交节点都添加到了当前分支 main 所指向的节点下. 这样的命令有什么作用呢? 场景一: 当前出了一些问题, 可此需要新建一些分支来解决, 最终解决了当前的问题: 但是此时, 我们只想要收录解决问题的提交到当前的main下, 此时就可以使用 rebase -i 和 cherry-pick 这两个命令来实现. 将HEAD调整到main分支上, 再使用 git cherry-pick C4 (左) 或者使用 git rebase -i HEAD~3 后调整提交 (右) 即可获得: 场景二: 更新历史提交节点中的信息 下面的提交树中, 我想更新newImage提交中的信息, 且是只更新它的信息, 可使用 rebase -i 和 cherry-pick 这两种方式来实现. 口述使用 rebase -i 命令过程: 先调整C2和C3顺序,将C2提交节点放到最前, 再使用 git commit --amend 来提交列新C2中的信息, 最后使用 rebase -i 命令将C3节点放到最前. 详细说明 cherry-pick 过程 (因为不用交互, 易于博客中展示). 首先调整HEAD到main: git checkout main 其次, 将C2 拿到最前: git cherry-pick C2 然后, 修改C2中的内容并提交: git commit --amend 最后, 将C3节点放到最前: git cherry-pick C3 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:4","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#场景一-当前出了一些问题-可此需要新建一些分支来解决-最终解决了当前的问题"},{"categories":null,"content":"提交树的节点移动 (rebase \u0026 cherry-pick) rebase: 它的主要作用是创建线性提交记录, 方便工程修改脉路整理. 比如对于当前提交树: 我们使用 git rebase main后提交树变化为: 现在分析一下这个结果. feature 和 main 分支的公共父节点是C1, 我在的HEAD指向feature, 此时运行以上命令后, git 将C2,C4 提交接到了main所指向的C3上, 也就是说: 这个命令会将当前分支的所有提交接到指定的分支上 因此 rebase 可以表象地理解为 剪枝 + 嫁接 如果使用merge命令的话提交树会变为: 这时提交记录则不够线性, 不方便查看对工程的修改历史 rebase 的另一个功能: 提交记录排序与删除. git rebase -i HEAD~4: 这个命令会弹出一个交互式的创口, 让你调整最新4个提交节点的顺序或者删除提交节点. 下面是一个例子: 知道这个功能即可, 不具体说明了 cherry-pick: 这个命令允许我们随意地移动提交树中的节点, 将指定的提交节点移动到当前的HEAD所指定的节点下. 对以下提交树: 使用 git cherry-pick C2 C4 C6 后结果为: 可以看到, 选中的提交节点都添加到了当前分支 main 所指向的节点下. 这样的命令有什么作用呢? 场景一: 当前出了一些问题, 可此需要新建一些分支来解决, 最终解决了当前的问题: 但是此时, 我们只想要收录解决问题的提交到当前的main下, 此时就可以使用 rebase -i 和 cherry-pick 这两个命令来实现. 将HEAD调整到main分支上, 再使用 git cherry-pick C4 (左) 或者使用 git rebase -i HEAD~3 后调整提交 (右) 即可获得: 场景二: 更新历史提交节点中的信息 下面的提交树中, 我想更新newImage提交中的信息, 且是只更新它的信息, 可使用 rebase -i 和 cherry-pick 这两种方式来实现. 口述使用 rebase -i 命令过程: 先调整C2和C3顺序,将C2提交节点放到最前, 再使用 git commit --amend 来提交列新C2中的信息, 最后使用 rebase -i 命令将C3节点放到最前. 详细说明 cherry-pick 过程 (因为不用交互, 易于博客中展示). 首先调整HEAD到main: git checkout main 其次, 将C2 拿到最前: git cherry-pick C2 然后, 修改C2中的内容并提交: git commit --amend 最后, 将C3节点放到最前: git cherry-pick C3 ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:4","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#场景二-更新历史提交节点中的信息"},{"categories":null,"content":"tag 前文中提交节点要么是使用提交ID标识的, 要么是使用分支名子标识的. 分支名字会被移动, 且有新的提交时分支名字也会移动到新的提交节点中, 提交ID太长,难记.因此需要一个为某个提交节点进行永久命各的办法: 它就是tag. 对于以下的提交树: 为不同的提交节点添加tag, 如运行命令: git tag V1 C1, git tag V2 C2, 这时的提交树为: 同时, 可以直接利用tag名称来移动HEAD: git checkout V1 可以看到这时HEAD指向了C1. 为什么不是V1* 呢, 这是因为无支对某个tag直接提交, 所以才会发生这种分离HEAD的现象. ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:5","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#tag"},{"categories":null,"content":"describe git describe \u003cref\u003e: \u003cref\u003e 为提交树中的引用, 默认为HEAD. 该命令的输出结果为: \u003ctag\u003e_\u003cnum\u003e_g\u003chash\u003e, tag为与该引用最近的标签, num 为 该引用与最近标签的间隔提交数, \u003chash\u003e为\u003cref\u003e的提交ID. 对于以下的提交树, 使用 git describe, git describe main, git describe side 的结果分别为: ","date":"2022-08-06","objectID":"/posts/git_usage_02/:6:6","series":null,"tags":["git"],"title":"Git的基本使用","uri":"/posts/git_usage_02/#describe"},{"categories":null,"content":"系列目的 介绍Git的基础配置及基础使用 介绍Magit的使用, 因为Magti相比与Git方便很多, 配合Emacs效率更高 ","date":"2022-08-06","objectID":"/posts/git_get_started_01/:1:0","series":null,"tags":["git"],"title":"Git 与 Magit 初始篇","uri":"/posts/git_get_started_01/#系列目的"},{"categories":null,"content":"使用命令行 windows 中使用bash, linux或Mac下使用terminal, 总之要开使用Git, 就要用命令行 要做的第一件事是检查电脑上是否安装了Git, 使用命令: git –version查看, 安装了则会返回版本号 没安装就去官网安装下 ","date":"2022-08-06","objectID":"/posts/git_get_started_01/:2:0","series":null,"tags":["git"],"title":"Git 与 Magit 初始篇","uri":"/posts/git_get_started_01/#使用命令行"},{"categories":null,"content":"配置Git的名字和邮箱 让Git知道你是谁, 两条命令: git config --global user.name \"your_name\" git config --global user.email \"your_email\" git config --list: #列出配置信息 git config --unset --global user.name # 取消名称设置 不使用 global 参数,则设置的是本仓库的信息 ","date":"2022-08-06","objectID":"/posts/git_get_started_01/:3:0","series":null,"tags":["git"],"title":"Git 与 Magit 初始篇","uri":"/posts/git_get_started_01/#配置git的名字和邮箱"},{"categories":null,"content":"配置Git代理 # 设置当前代理 git config http.proxy http://127.0.0.1:2334 # 取消当前代理 git config --unset http.proxy #设置socks5代理 git config http.proxy socks5://127.0.0.1 #取消全局代理 git config --global --unset http.proxy ","date":"2022-08-06","objectID":"/posts/git_get_started_01/:4:0","series":null,"tags":["git"],"title":"Git 与 Magit 初始篇","uri":"/posts/git_get_started_01/#配置git代理"},{"categories":null,"content":"初始化Git仓库 在需要使用Git管理的仓库中运行 git init 即可 ","date":"2022-08-06","objectID":"/posts/git_get_started_01/:5:0","series":null,"tags":["git"],"title":"Git 与 Magit 初始篇","uri":"/posts/git_get_started_01/#初始化git仓库"},{"categories":null,"content":"Magit 这是Emacs下的一个Git工具, 直接在Emacs下安装该包即可, 一般现有的Emacs工具都被作者安装好了. Emacsh下Magit的打开方式: M-x magit-status ","date":"2022-08-06","objectID":"/posts/git_get_started_01/:6:0","series":null,"tags":["git"],"title":"Git 与 Magit 初始篇","uri":"/posts/git_get_started_01/#magit"},{"categories":null,"content":"Git趣味学习 这个游戏可以学习基础； 这个网站可以助你熟练掌握命令； ","date":"2022-08-06","objectID":"/posts/git_get_started_01/:7:0","series":null,"tags":["git"],"title":"Git 与 Magit 初始篇","uri":"/posts/git_get_started_01/#git趣味学习"},{"categories":null,"content":"emacs: ox-hugo emacs里面主要是使用ox-hugo这个插件, 将所写的org文件转成md文件, 当然转换中仍有一些问题, 但勉强可以使用. ","date":"2022-08-04","objectID":"/posts/02_hugo_with_emacs/:1:0","series":null,"tags":["博客"],"title":"使用emacs写hugo博客","uri":"/posts/02_hugo_with_emacs/#emacs-ox-hugo"},{"categories":null,"content":"ox-hugo的安装 M-x list-packages: 这个命令会列出所有的可安装的包 C-s: 使用搜索找到ox-hugo 操控高亮到ox-hugo, 按i x 这两个字母, i表示Install, x表示eXecute. 在配置文件中添加ox-hugo配置 (use-package ox-hugo :ensure t ;Auto-install the package from Melpa :pin melpa ;`package-archives' should already have (\"melpa\" . \"https://melpa.org/packages/\") :after ox) 这时在org模式里就可以使用hugo了 C-c C-e时会多一个导出选项: 如果按以上操作, 有这一项出来, 那么ox-hugo才算成功, 没有就排查错误, 比如ox-hugo有没有安装上, 配置信息有没有加对地方 ","date":"2022-08-04","objectID":"/posts/02_hugo_with_emacs/:2:0","series":null,"tags":["博客"],"title":"使用emacs写hugo博客","uri":"/posts/02_hugo_with_emacs/#ox-hugo的安装"},{"categories":null,"content":"ox-hugo的使用 将org文件使用ox-hugo导出时,需要加一些配置才能导出到正确的位置.我参考这个配置: #+OPTIONS: author:nil ^:{} #+HUGO_FRONT_MATTER_FORMAT: YAML #+HUGO_BASE_DIR: 博客的根目录 #+HUGO_SECTION: posts/ #+HUGO_CUSTOM_FRONT_MATTER: :toc true #+HUGO_AUTO_SET_LASTMOD: t #+HUGO_TAGS: 标签1 标签2 #+HUGO_CATEGORIES: 类别 #+HUGO_DRAFT: false #+TITLE: 博客名字 这其实是一个重复性的工作, 因此使用Yasnippet模板 配置Yasnippet模版(安装使用部分略, 使用的Centaur Emacs贡献者已安装配置好了) 使用: M-x yas-new-snippet (C-c \u0026 C-n) 调出添加模板界面 添加以下内容, 再保存(起个名字:hugo, 这默认保存在~/.emacs.d/snippets/org-mode/hugo中) # -*- mode: snippet -*- # name: hugo_blog # key: \u003ehugo # -- #+OPTIONS: author:nil ^:{} #+hugo_front_matter_format: yaml #+HUGO_BASE_DIR: ../ #+HUGO_SECTION: posts/ #+DATE: `(format-time-string \"[%Y-%m-%d %a %H:%M]\")` #+HUGO_CUSTOM_FRONT_MATTER: :toc true #+HUGO_AUTO_SET_LASTMOD: t #+HUGO_TAGS: $1 #+HUGO_CATEGORIES: $2 #+HUGO_DRAFT: false #+TITLE: $3 模板解释: 1. key: 后面部分, 这个是所使用的快捷键；2. #–: 后面的部分是模板 这时输入在文中 \u003ehugo, 再按TAB后就可以弹出模板内容 #+OPTIONS: author:nil ^:{} #+hugo_front_matter_format: yaml #+HUGO_BASE_DIR: ../ #+HUGO_SECTION: posts/ #+DATE: [2022-08-05 Fri 00:41] #+HUGO_CUSTOM_FRONT_MATTER: :toc true #+HUGO_AUTO_SET_LASTMOD: t #+HUGO_TAGS: #+HUGO_CATEGORIES: #+HUGO_DRAFT: false #+TITLE: ","date":"2022-08-04","objectID":"/posts/02_hugo_with_emacs/:3:0","series":null,"tags":["博客"],"title":"使用emacs写hugo博客","uri":"/posts/02_hugo_with_emacs/#ox-hugo的使用"},{"categories":null,"content":"部署博客到github 在博客目录下运行 hugo 命令, 这是会更新根目录下public文件夹里的内容 申请一个仓库, 这个仓库是需要与用户名同名的:your_name.github.io 申请完后会有一些提示教你怎么去将本地仓库提交到github上 在本地的public目录下创建git目录 git init git add * git commit -m \"commit 1st\" git remote add origin https://github.com/your_name/your_name.github.io.git git push -u origin main 在提交的时候可能需要用到用户名your_name与密码,密码改为申请密钥 密钥申请: 点setting 选择developer settings 选择第三个 personal access tokens 点generate new token 对note, expiration 和 scopes进行设置即可. note是你这个token的名字, expiration是这个token的有效时间, select scopes是这个token的作用范围, 如果都不选这个token就一点用都没有 ","date":"2022-08-04","objectID":"/posts/02_hugo_with_emacs/:4:0","series":null,"tags":["博客"],"title":"使用emacs写hugo博客","uri":"/posts/02_hugo_with_emacs/#部署博客到github"},{"categories":null,"content":"自动推送脚本 hugo cd public git add . msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" git push cd .. 这里会需要输入github的用户名和密码,密码是前面创建的token 最后等仓库的action页面build完成就行了, 一般就是等一会 ","date":"2022-08-04","objectID":"/posts/02_hugo_with_emacs/:5:0","series":null,"tags":["博客"],"title":"使用emacs写hugo博客","uri":"/posts/02_hugo_with_emacs/#自动推送脚本"},{"categories":null,"content":"ubuntu 18.04安装hugo最新稳定版 在站上下载安装包 https://github.com/gohugoio/hugo/releases 安装即可 `sudo hugo version`查看版本 ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:1:0","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#ubuntu-18-dot-04安装hugo最新稳定版"},{"categories":null,"content":"创建hugo站 hugo new site hello-world 这个命令会创建一个hello-world文件夹 ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:2:0","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#创建hugo站"},{"categories":null,"content":"进入 hello-world文件夹 cd hello-world sudo hugo 即可显示提示信息, 若不这样显示, 就是出错了, 网上查别的教程吧 至此安装完成 ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:3:0","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#进入-hello-world文件夹"},{"categories":null,"content":"选择主题 hugo这个博客是需要配合现有的主题的, 我这里使用的是DoIt主题 ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:4:0","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#选择主题"},{"categories":null,"content":"主题下载 在这个网址下臷主题网址,我选择的是DoIt. DoIt的使用教程在这里 ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:4:1","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#主题下载"},{"categories":null,"content":"主题使用 下载主题并放到./hello-world/themes文件夹里 修改配置文件,就是根目录下的config.toml, 这里使用的是DoIt网站上提供的默认配置 baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] determines default content language defaultContentLanguage = \"en\" # language code languageCode = \"en\" title = \"My New Hugo Site\" # Change the default theme to be use when building the site with Hugo theme = \"DoIt\" [params] # DoIt theme version version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 打开hugo服务: hugo server (若要远程打开, 则命令为:hugo server –bind 0.0.0.0) 打开博客页面: http://localhost:1313 ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:4:2","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#主题使用"},{"categories":null,"content":"头像 先弄个需要作为头像的图片, 将其放到/static/images/avatar.jpg 在配置文件中添加(这里图片的URL相对目录是相对根目录下static或assert目录的) [params.home.profile] enable = true # Gravatar Email for preferred avatar in home page gravatarEmail = \"\" # URL of avatar shown in home page avatarURL = \"/images/avatar.jpg\" 将DoIt中/exampleSite/content文件夹中除posts以外的内容都复制到本博客的/content文件夹中(在此之前这个/content文件夹只有posts一个文件夹) 重新运行博客就有头像了 效果: ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:4:3","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#头像"},{"categories":null,"content":"hugo内容组织 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:5:0","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#hugo内容组织"},{"categories":null,"content":"本地资源 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. ","date":"2022-08-04","objectID":"/posts/01_hugo_install/:5:1","series":null,"tags":["博客"],"title":"hugo安装与入门","uri":"/posts/01_hugo_install/#本地资源"},{"categories":null,"content":" Theme Documentation - Basics Discover what the Hugo - DoIt theme is all about and the core-concepts behind it. Read more... Theme Documentation - Content Find out how to create and organize your content quickly and intuitively in DoIt theme. Read more... Theme Documentation - Extended Shortcodes DoIt theme provides multiple shortcodes on top of built-in ones in Hugo. Read more... ","date":"2021-11-01","objectID":"/showcase/:0:0","series":null,"tags":null,"title":"Showcase","uri":"/showcase/#"},{"categories":null,"content":"  DoIt is a clean, elegant but advanced blog theme for Hugo developed by HEIGE-PCloud. It is based on the LoveIt Theme, LeaveIt Theme and KeepIt Theme. ","date":"2019-08-02","objectID":"/about/:0:0","series":null,"tags":null,"title":"About DoIt","uri":"/about/#"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  PJAX loading supported  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Baidu Analytics supported  Umami Analytics supported  Plausible Analytics supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout / Responsive layout / Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 64 social links supported  Up to 28 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Waline comment system supported by Waline  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  Utterances comment system supported by Utterances  Twikoo comment system supported by Twikoo  Vssue comment system supported by Vssue  Remark42 comment system supported by Remark42  giscus comment system supported by giscus Extended Features  Search supported by Lunr.js or algolia or Fuse.js  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightgallery.js  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $ \\KaTeX $  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent … ","date":"2019-08-02","objectID":"/about/:0:1","series":null,"tags":null,"title":"About DoIt","uri":"/about/#features"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  PJAX loading supported  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Baidu Analytics supported  Umami Analytics supported  Plausible Analytics supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout / Responsive layout / Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 64 social links supported  Up to 28 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Waline comment system supported by Waline  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  Utterances comment system supported by Utterances  Twikoo comment system supported by Twikoo  Vssue comment system supported by Vssue  Remark42 comment system supported by Remark42  giscus comment system supported by giscus Extended Features  Search supported by Lunr.js or algolia or Fuse.js  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightgallery.js  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $ \\KaTeX $  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent … ","date":"2019-08-02","objectID":"/about/:0:1","series":null,"tags":null,"title":"About DoIt","uri":"/about/#performance-and-seo"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  PJAX loading supported  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Baidu Analytics supported  Umami Analytics supported  Plausible Analytics supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout / Responsive layout / Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 64 social links supported  Up to 28 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Waline comment system supported by Waline  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  Utterances comment system supported by Utterances  Twikoo comment system supported by Twikoo  Vssue comment system supported by Vssue  Remark42 comment system supported by Remark42  giscus comment system supported by giscus Extended Features  Search supported by Lunr.js or algolia or Fuse.js  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightgallery.js  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $ \\KaTeX $  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent … ","date":"2019-08-02","objectID":"/about/:0:1","series":null,"tags":null,"title":"About DoIt","uri":"/about/#appearance-and-layout"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  PJAX loading supported  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Baidu Analytics supported  Umami Analytics supported  Plausible Analytics supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout / Responsive layout / Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 64 social links supported  Up to 28 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Waline comment system supported by Waline  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  Utterances comment system supported by Utterances  Twikoo comment system supported by Twikoo  Vssue comment system supported by Vssue  Remark42 comment system supported by Remark42  giscus comment system supported by giscus Extended Features  Search supported by Lunr.js or algolia or Fuse.js  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightgallery.js  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $ \\KaTeX $  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent … ","date":"2019-08-02","objectID":"/about/:0:1","series":null,"tags":null,"title":"About DoIt","uri":"/about/#social-and-comment-systems"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  PJAX loading supported  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Baidu Analytics supported  Umami Analytics supported  Plausible Analytics supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout / Responsive layout / Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 64 social links supported  Up to 28 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Waline comment system supported by Waline  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  Utterances comment system supported by Utterances  Twikoo comment system supported by Twikoo  Vssue comment system supported by Vssue  Remark42 comment system supported by Remark42  giscus comment system supported by giscus Extended Features  Search supported by Lunr.js or algolia or Fuse.js  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightgallery.js  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $ \\KaTeX $  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent … ","date":"2019-08-02","objectID":"/about/:0:1","series":null,"tags":null,"title":"About DoIt","uri":"/about/#extended-features"},{"categories":null,"content":"License DoIt is licensed under the MIT license. Check the LICENSE file for details. Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete.js Lunr.js algoliasearch Fuse.js lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine Waline Twikoo Vssue cookieconsent Pjax Topbar Remark42 ","date":"2019-08-02","objectID":"/about/:0:2","series":null,"tags":null,"title":"About DoIt","uri":"/about/#license"},{"categories":null,"content":" You are not connected to the Internet, only cached pages will be available. ","date":"0001-01-01","objectID":"/offline/:0:0","series":null,"tags":null,"title":"Offline","uri":"/offline/#"}]